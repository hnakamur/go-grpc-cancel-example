// Code generated by protoc-gen-go.
// source: cancel.proto
// DO NOT EDIT!

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	cancel.proto

It has these top-level messages:
	JobControl
	JobResult
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JobControl struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *JobControl) Reset()                    { *m = JobControl{} }
func (m *JobControl) String() string            { return proto.CompactTextString(m) }
func (*JobControl) ProtoMessage()               {}
func (*JobControl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobControl) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *JobControl) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type JobResult struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *JobResult) Reset()                    { *m = JobResult{} }
func (m *JobResult) String() string            { return proto.CompactTextString(m) }
func (*JobResult) ProtoMessage()               {}
func (*JobResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JobResult) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *JobResult) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*JobControl)(nil), "example.JobControl")
	proto.RegisterType((*JobResult)(nil), "example.JobResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExampleService service

type ExampleServiceClient interface {
	RunJob(ctx context.Context, opts ...grpc.CallOption) (ExampleService_RunJobClient, error)
}

type exampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewExampleServiceClient(cc *grpc.ClientConn) ExampleServiceClient {
	return &exampleServiceClient{cc}
}

func (c *exampleServiceClient) RunJob(ctx context.Context, opts ...grpc.CallOption) (ExampleService_RunJobClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExampleService_serviceDesc.Streams[0], c.cc, "/example.ExampleService/RunJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleServiceRunJobClient{stream}
	return x, nil
}

type ExampleService_RunJobClient interface {
	Send(*JobControl) error
	Recv() (*JobResult, error)
	grpc.ClientStream
}

type exampleServiceRunJobClient struct {
	grpc.ClientStream
}

func (x *exampleServiceRunJobClient) Send(m *JobControl) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleServiceRunJobClient) Recv() (*JobResult, error) {
	m := new(JobResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ExampleService service

type ExampleServiceServer interface {
	RunJob(ExampleService_RunJobServer) error
}

func RegisterExampleServiceServer(s *grpc.Server, srv ExampleServiceServer) {
	s.RegisterService(&_ExampleService_serviceDesc, srv)
}

func _ExampleService_RunJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServiceServer).RunJob(&exampleServiceRunJobServer{stream})
}

type ExampleService_RunJobServer interface {
	Send(*JobResult) error
	Recv() (*JobControl, error)
	grpc.ServerStream
}

type exampleServiceRunJobServer struct {
	grpc.ServerStream
}

func (x *exampleServiceRunJobServer) Send(m *JobResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleServiceRunJobServer) Recv() (*JobControl, error) {
	m := new(JobControl)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ExampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.ExampleService",
	HandlerType: (*ExampleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunJob",
			Handler:       _ExampleService_RunJob_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cancel.proto",
}

func init() { proto.RegisterFile("cancel.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4e, 0xcc, 0x4b,
	0x4e, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8,
	0x49, 0x55, 0x32, 0xe1, 0xe2, 0xf2, 0xca, 0x4f, 0x72, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0xcf, 0x11,
	0x12, 0xe2, 0x62, 0x29, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3,
	0x41, 0x62, 0x29, 0x89, 0x25, 0x89, 0x12, 0x4c, 0x10, 0x31, 0x10, 0x5b, 0xc9, 0x98, 0x8b, 0xd3,
	0x2b, 0x3f, 0x29, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x84, 0x58, 0x4d, 0x46, 0x9e, 0x5c, 0x7c, 0xae,
	0x10, 0x5b, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xcc, 0xb9, 0xd8, 0x82, 0x4a, 0xf3,
	0xbc, 0xf2, 0x93, 0x84, 0x84, 0xf5, 0xa0, 0x0e, 0xd2, 0x43, 0xb8, 0x46, 0x4a, 0x08, 0x59, 0x10,
	0x62, 0x99, 0x12, 0x83, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0x01, 0x97, 0x5c, 0x72, 0x7e, 0xae, 0x5e,
	0x5e, 0x62, 0x51, 0x69, 0x86, 0x5e, 0x7a, 0x51, 0x41, 0x32, 0x4c, 0x65, 0xb1, 0x1e, 0xc4, 0x9b,
	0x4e, 0x3c, 0x50, 0xab, 0x02, 0x40, 0xde, 0x0d, 0x60, 0x4c, 0x62, 0x03, 0xfb, 0xdb, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x7e, 0xfd, 0xba, 0x03, 0x07, 0x01, 0x00, 0x00,
}
